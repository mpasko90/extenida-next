import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { useRef, useEffect, useState, useCallback } from "react";
import useEmblaCarousel from 'embla-carousel-react';
import { extendiaReviews, type Review } from "@/data/extendia-reviews";
import { ChevronLeft, ChevronRight } from "lucide-react";

// London locations for random assignment
const londonLocations = [
  "Wimbledon", "Richmond", "Putney", "Kingston", "Twickenham", 
  "Surbiton", "Clapham", "Wandsworth", "Fulham", "Chelsea", "Kensington"
];

// Project types for random assignment
const projectTypes = [
  "Loft Conversion", "Kitchen Extension", "Bathroom Renovation", 
  "House Extension", "Side Return Extension", "Full Renovation",
  "Home Refurbishment", "Garden Room", "Basement Conversion"
];

// Avatar emojis for random assignment
const avatarEmojis = ["👩‍💼", "👨‍💻", "👩‍🎨", "👨‍🔧", "👩‍🏫", "👨‍💼", "👩‍🔧", "👨‍🎨"];

// Extend reviews with location and project if not present
const enrichedReviews = extendiaReviews.map((review: Review) => {
  // Extract project type from content if possible, or assign random
  let project = review.project;
  if (!project) {
    if (review.content.toLowerCase().includes("loft")) {
      project = "Loft Conversion";
    } else if (review.content.toLowerCase().includes("kitchen")) {
      project = "Kitchen Extension";
    } else if (review.content.toLowerCase().includes("bathroom")) {
      project = "Bathroom Renovation";
    } else if (review.content.toLowerCase().includes("extension")) {
      project = "House Extension";
    } else {
      project = projectTypes[Math.floor(Math.random() * projectTypes.length)];
    }
  }

  return {
    ...review,
    id: review.id || `review-${Math.random().toString(36).substr(2, 9)}`,
    name: review.author, // Map author to name for UI consistency
    text: review.content, // Map content to text for UI consistency
    location: review.location || londonLocations[Math.floor(Math.random() * londonLocations.length)],
    project: project,
    image: avatarEmojis[Math.floor(Math.random() * avatarEmojis.length)],
    rating: review.rating || Math.floor(Math.random() * 2) + 4 // Random 4-5 rating if not provided
  };
}).slice(0, 12); // Limit to 12 reviews for better performance

const TestimonialsSection = () => {
  // Check for reduced motion preference
  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);
  const [emblaRef, emblaApi] = useEmblaCarousel({ 
    loop: true,
    align: "start",
    slidesToScroll: 1,
    breakpoints: {
      '(min-width: 768px)': { slidesToScroll: 2 },
      '(min-width: 1024px)': { slidesToScroll: 3 }
    }
  });
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [scrollSnaps, setScrollSnaps] = useState<number[]>([]);

  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    setPrefersReducedMotion(mediaQuery.matches);
    
    const handleChange = (e: MediaQueryListEvent) => {
      setPrefersReducedMotion(e.matches);
    };
    
    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, []);

  // Embla Carousel functionality
  const scrollPrev = useCallback(() => emblaApi && emblaApi.scrollPrev(), [emblaApi]);
  const scrollNext = useCallback(() => emblaApi && emblaApi.scrollNext(), [emblaApi]);
  const scrollTo = useCallback((index: number) => emblaApi && emblaApi.scrollTo(index), [emblaApi]);

  const onSelect = useCallback(() => {
    if (!emblaApi) return;
    setSelectedIndex(emblaApi.selectedScrollSnap());
  }, [emblaApi, setSelectedIndex]);

  useEffect(() => {
    if (!emblaApi) return;

    setScrollSnaps(emblaApi.scrollSnapList());
    emblaApi.on("select", onSelect);
    onSelect();

    return () => {
      emblaApi.off("select", onSelect);
    };
  }, [emblaApi, onSelect]);

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 30 },
    visible: { opacity: 1, y: 0 }
  };

  // Array of refs for cards
  const cardRefs = useRef<(HTMLDivElement | null)[]>([]);

  return (
    <section className="py-20 bg-gradient-to-b from-gray-900/90 via-extendia-primary/80 to-extendia-accent/10 relative overflow-hidden">
      {/* Animated Background */}
      <motion.div
        className="absolute -z-10 inset-0 pointer-events-none"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1 }}
      >
        <motion.div
          className="absolute top-1/4 -left-32 w-96 h-96 bg-gradient-to-br from-extendia-accent/30 to-extendia-primary/20 rounded-full blur-3xl"
          animate={prefersReducedMotion ? {} : {
            x: [0, 40, 0],
            y: [0, -30, 0],
            scale: [1, 1.1, 1],
            rotate: [0, 180, 360],
          }}
          transition={prefersReducedMotion ? {} : { duration: 18, repeat: Infinity, ease: "easeInOut" }}
        />
        <motion.div
          className="absolute bottom-1/4 -right-32 w-80 h-80 bg-gradient-to-br from-extendia-card/20 to-extendia-accent/30 rounded-full blur-3xl"
          animate={prefersReducedMotion ? {} : {
            x: [0, -40, 0],
            y: [0, 40, 0],
            scale: [1.1, 1, 1.1],
            rotate: [360, 180, 0],
          }}
          transition={prefersReducedMotion ? {} : { duration: 14, repeat: Infinity, ease: "easeInOut" }}
        />
      </motion.div>
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        {/* Section Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 drop-shadow-lg">
            What Homeowners in <span className="text-extendia-accent">South West London</span> Say
          </h2>
          <p className="text-xl text-white/80 max-w-3xl mx-auto drop-shadow-md">
            Discover why families in Kingston, Putney, Richmond, Surbiton, Twickenham, and Wimbledon trust Extendia for their house extensions, loft conversions, and renovations.
          </p>
        </motion.div>

        {/* Testimonials Carousel */}
        <div className="relative">
          <div className="embla overflow-hidden" ref={emblaRef}>
            <motion.div 
              className="embla__container flex"
              variants={containerVariants}
              initial="hidden"
              whileInView="visible"
              viewport={{ once: true }}
            >
              {enrichedReviews.map((testimonial, idx) => {
                // 3D tilt effect handlers
                const handleMouseMove = (e: React.MouseEvent) => {
                  const card = cardRefs.current[idx];
                  if (!card) return;
                  const rect = card.getBoundingClientRect();
                  const x = e.clientX - rect.left;
                  const y = e.clientY - rect.top;
                  const centerX = rect.width / 2;
                  const centerY = rect.height / 2;
                  const rotateX = ((y - centerY) / centerY) * 8; // max 8deg
                  const rotateY = ((x - centerX) / centerX) * -8;
                  card.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.03,1.03,1.03)`;
                };
                const handleMouseLeave = () => {
                  const card = cardRefs.current[idx];
                  if (!card) return;
                  card.style.transform = "rotateX(0deg) rotateY(0deg) scale3d(1,1,1)";
                };
                return (
                  <motion.div
                    key={testimonial.id}
                    variants={itemVariants}
                    className="embla__slide flex-[0_0_100%] min-w-0 md:flex-[0_0_50%] lg:flex-[0_0_33.33%] p-4"
                  >
                    <Card
                      ref={el => { cardRefs.current[idx] = el; }}
                      onMouseMove={handleMouseMove}
                      onMouseLeave={handleMouseLeave}
                      className="h-full bg-white/10 backdrop-blur-lg border border-extendia-accent/30 shadow-xl rounded-2xl flex flex-col justify-between focus-within:ring-2 focus-within:ring-extendia-accent group transition-all duration-300 cursor-pointer"
                      style={{ transition: "transform 0.3s cubic-bezier(.25,.8,.25,1)" }}
                      tabIndex={0}
                      aria-label={`Testimonial from ${testimonial.name}, ${testimonial.location}`}
                    >
                      <CardContent className="p-8 flex flex-col h-full">
                        <div className="flex items-center mb-4">
                          <Avatar className="w-12 h-12 mr-4">
                            <AvatarFallback className="bg-extendia-accent/90 text-white text-xl">{testimonial.image}</AvatarFallback>
                          </Avatar>
                          <div>
                            <h4 className="font-semibold text-white drop-shadow-lg text-lg">{testimonial.name}</h4>
                            <Badge className="bg-extendia-accent/90 text-white text-xs font-semibold shadow mt-1" aria-label={`Project: ${testimonial.project}`}>{testimonial.project}</Badge>
                            <p className="text-xs text-white/80 mt-1">{testimonial.location}</p>
                          </div>
                        </div>
                        <p className="text-white text-base flex-1 mb-4 drop-shadow-lg font-medium">"{testimonial.text.length > 180 ? `${testimonial.text.substring(0, 180)}...` : testimonial.text}"</p>
                        <div className="flex items-center gap-1 mt-auto">
                          {[...Array(testimonial.rating)].map((_, i) => (
                            <span key={i} aria-label="star" className="text-extendia-accent text-lg">★</span>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                );
              })}
            </motion.div>
          </div>
          
          {/* Navigation Buttons */}
          <button 
            className="absolute left-0 top-1/2 transform -translate-y-1/2 z-10 bg-extendia-accent/80 text-white p-3 rounded-full shadow-md hover:bg-extendia-accent focus:outline-none focus:ring-2 focus:ring-white -ml-3 md:ml-2"
            onClick={scrollPrev}
            aria-label="Previous testimonial"
          >
            <ChevronLeft size={24} />
          </button>
          <button 
            className="absolute right-0 top-1/2 transform -translate-y-1/2 z-10 bg-extendia-accent/80 text-white p-3 rounded-full shadow-md hover:bg-extendia-accent focus:outline-none focus:ring-2 focus:ring-white -mr-3 md:mr-2"
            onClick={scrollNext}
            aria-label="Next testimonial"
          >
            <ChevronRight size={24} />
          </button>
          
          {/* Dots indicators */}
          <div className="flex justify-center mt-6 gap-2">
            {scrollSnaps.map((_, idx) => (
              <button
                key={idx}
                className={`h-2 rounded-full transition-all focus:outline-none focus:ring-2 focus:ring-extendia-accent ${
                  idx === selectedIndex ? "w-8 bg-extendia-accent" : "w-2 bg-white/50"
                }`}
                onClick={() => scrollTo(idx)}
                aria-label={`Go to slide ${idx + 1}`}
              />
            ))}
          </div>
        </div>

        {/* Bottom Stats */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="mt-16 text-center"
        >
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-2xl mx-auto">
            <div className="flex flex-col items-center">
              <span className="text-3xl font-bold text-white mb-2 drop-shadow">500+</span>
              <Badge className="bg-extendia-accent/80 text-white text-xs font-semibold shadow mb-1">Happy Clients</Badge>
              <span className="text-white/80">Families in South West London</span>
            </div>
            <div className="flex flex-col items-center">
              <span className="text-3xl font-bold text-white mb-2 drop-shadow">4.9/5</span>
              <Badge className="bg-extendia-accent/80 text-white text-xs font-semibold shadow mb-1">Average Rating</Badge>
              <span className="text-white/80">Based on 150+ Reviews</span>
            </div>
            <div className="flex flex-col items-center">
              <span className="text-3xl font-bold text-white mb-2 drop-shadow">15+</span>
              <Badge className="bg-extendia-accent/80 text-white text-xs font-semibold shadow mb-1">Years Experience</Badge>
              <span className="text-white/80">Award-Winning Team</span>
            </div>
          </div>
        </motion.div>
      </div>
      <div className="w-full h-8 bg-gradient-to-b from-transparent to-extendia-primary/30 blur-md opacity-80 pointer-events-none" aria-hidden="true"></div>
    </section>
  );
};

export default TestimonialsSection;
